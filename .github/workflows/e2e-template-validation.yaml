name: Run Template Validation

jobs:
  uptest:
    if: ${{ github.event.issue.pull_request }}
    runs-on: [e2-standard-8, linux]

    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2
        with:
          platforms: all

      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3
        with:
          go-version: ${{ inputs.go-version }}

      - name: Checkout PR
        id: checkout-pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr checkout ${{ github.event.issue.number }}
          git submodule update --init --recursive
          OUTPUT=$(git log -1 --format='%H')
          echo "commit-sha=$OUTPUT" >> $GITHUB_OUTPUT

      - name: Find the Go Build Cache
        if: ${{ inputs.package-type  == 'provider' }}
        id: go
        run: echo "cache=$(make go.cachedir)" >> $GITHUB_OUTPUT

      - name: Cache the Go Build Cache
        if: ${{ inputs.package-type  == 'provider' }}
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-uptest-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-uptest-

      - name: Cache Go Dependencies
        if: ${{ inputs.package-type  == 'provider' }}
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        if: ${{ inputs.package-type  == 'provider' }}
        run: make vendor vendor.check

      - name: Run Uptest
        id: run-uptest
        env:
          UPTEST_CLOUD_CREDENTIALS: '{"upjet": "provider-template"}'
          UPTEST_EXAMPLE_LIST: "examples/null/resource.yaml"
          UPTEST_TEST_DIR: ./_output/controlplane-dump
          UPTEST_DATASOURCE_PATH: .work/uptest-datasource.yaml
        run: |
          mkdir -p .work && echo "${{ secrets.UPTEST_DATASOURCE }}" > .work/uptest-datasource.yaml
          make e2e

      - name: Collect Cluster Dump
        if: always()
        run: |
          make controlplane.dump

      - name: Upload Cluster Dump
        if: always()
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3
        with:
          name: controlplane-dump
          path: ./_output/controlplane-dump

      - name: Cleanup
        if: always()
        run: |
          eval $(make --no-print-directory build.vars)
          ${KUBECTL} delete managed --all || true
